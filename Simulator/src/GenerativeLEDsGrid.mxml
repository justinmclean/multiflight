<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="600" height="460">
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="5" paddingBottom="5" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.graphics.SolidColor;
			
			[Bindable] protected var params:Parameters = new Parameters();
			
			[Bindable] protected var time:int;
			[Bindable] protected var red:int;
			[Bindable] protected var green:int;
			[Bindable] protected var blue:int;
			
			protected var running:Boolean = false;
			protected var timer:Timer;
			protected var noboxes:int = 28;
			
			protected function genColour(time:int):int
			{
				// v = t * ((t >> s1 | t >> s2) & m & t > s3)
				return time * ((time >> params.shift1 | time >> params.shift2) & params.mask & time >> params.shift3);
			}
			
			protected function timeChanged(event:TimerEvent):void
			{
				time = timer.currentCount;
				
				for (var i:int = 1; i <= noboxes ; i++)
				{
					red = genColour(time + 3*i) & 0xFF;
					green = genColour(time + 3*i + params.spread) & 0xFF;
					blue = genColour(time + 3*i + 2*params.spread) & 0xFF;
				
					var fill:SolidColor = new SolidColor((red << 16) + (green << 8) + blue);
				
					this["box"+i].fill = fill;
				}
				
				boxes.invalidateDisplayList();
			}
				
			protected function run(event:MouseEvent):void
			{
				running = !running;
				
				if (running) {
					startStop.label = "Stop";
					timer = new Timer(params.delay);
					timer.addEventListener(TimerEvent.TIMER, timeChanged);
					timer.start();
				}
				else {
					startStop.label = "Start";
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER, timeChanged);
				}
				
			}
			
			protected function reset(event:MouseEvent):void
			{
				var running:Boolean = timer.running;
				
				params = new Parameters();
				timer = new Timer(params.delay);
				
				if (running) {
					timer.start();
				}
			}
			
			protected function updateParams():void
			{
				var changed:Boolean = params.delay != Number(delay.text);
				
				params.mask = Number(masking.text);
				params.delay = Number(delay.text);
				params.spread = Number(spread.text);
				params.shift1 = Number(shift1.text);
				params.shift2 = Number(shift2.text);
				params.shift3 = Number(shift3.text);
				
				if (changed && timer) {
					timer.stop();
					timer.delay = params.delay;
					timer.start();
				}
			}
		]]>
	</fx:Script>
	
	<s:FormHeading label="Generative LED Colour Simulator" />
	<s:Label text="Formula: time * ((time >> shift1 | time >> shift2) &amp; mask &amp; time >> shift3)" />	
	
	<s:HGroup gap="20" height="100%" width="100%">
		<s:Form height="100%" width="50%">
			<s:FormItem label="Shift 1">
				<s:TextInput id="shift1" text="{params.shift1}" change="updateParams()" />
			</s:FormItem>
			<s:FormItem label="Shift 2">
				<s:TextInput id="shift2" text="{params.shift2}" change="updateParams()" />
			</s:FormItem>
			<s:FormItem label="Shift 3">
				<s:TextInput id="shift3" text="{params.shift3}" change="updateParams()" />
			</s:FormItem>
			<s:FormItem label="Mask">
				<s:TextInput id="masking" text="{params.mask}" change="updateParams()" />
			</s:FormItem>
			<s:FormItem label="Spread">
				<s:TextInput id="spread" text="{params.spread}" change="updateParams()" />
			</s:FormItem>
			<s:FormItem label="Delay">
				<s:TextInput id="delay" text="{params.delay}" change="updateParams()" />
			</s:FormItem>
			<s:HGroup>
				<s:Button id="startStop" label="Start" click="run(event)" />
				<s:Button label="Reset" click="reset(event)" />
			</s:HGroup>
		</s:Form>
		
		<s:VGroup height="100%" width="50%">
			<s:Spacer height="20" />
			<s:VGroup gap="0" height="100%" width="100%">
				<s:HGroup id="boxes" gap="0" width="80" height="140">
					<s:VGroup gap="0">
						<s:Rect id="box7" height="20" width="20" />
						<s:Rect id="box6" height="20" width="20" />
						<s:Rect id="box5" height="20" width="20" />
						<s:Rect id="box4" height="20" width="20" />
						<s:Rect id="box3" height="20" width="20" />
						<s:Rect id="box2" height="20" width="20" />
						<s:Rect id="box1" height="20" width="20" />
					</s:VGroup>
					<s:VGroup gap="0">
						<s:Rect id="box8" height="20" width="20" />
						<s:Rect id="box9" height="20" width="20" />
						<s:Rect id="box10" height="20" width="20" />
						<s:Rect id="box11" height="20" width="20" />
						<s:Rect id="box12" height="20" width="20" />
						<s:Rect id="box13" height="20" width="20" />
						<s:Rect id="box14" height="20" width="20" />
					</s:VGroup>
					<s:VGroup gap="0">
						<s:Rect id="box21" height="20" width="20" />
						<s:Rect id="box20" height="20" width="20" />
						<s:Rect id="box19" height="20" width="20" />
						<s:Rect id="box18" height="20" width="20" />
						<s:Rect id="box17" height="20" width="20" />
						<s:Rect id="box16" height="20" width="20" />
						<s:Rect id="box15" height="20" width="20" />
					</s:VGroup>
					<s:VGroup gap="0">
						<s:Rect id="box22" height="20" width="20" />
						<s:Rect id="box23" height="20" width="20" />
						<s:Rect id="box24" height="20" width="20" />
						<s:Rect id="box25" height="20" width="20" />
						<s:Rect id="box26" height="20" width="20" />
						<s:Rect id="box27" height="20" width="20" />
						<s:Rect id="box28" height="20" width="20" />
					</s:VGroup>
				</s:HGroup>
				<s:Spacer height="20" />
				<s:VGroup width="100%" height="100%">
					<s:Label text="Red: {red}" />
					<s:Label text="Green: {green}" />
					<s:Label text="Blue: {blue}" />
					<s:Label text="Time: {time}" />
				</s:VGroup>
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>

</s:Application>
